;;**********************************************
;;Rowan Dempster (20635120)
;;CS 135 Fall 2015
;;Assignment 04, Problem 2
;;**********************************************



;;part (a)

;;(sum-list list) produces the sum of the numbers in list

;;sum-list: (listof Num) -> (listof Num)

;;required: sum of empty list is 0

;;Examples:
(check-expect (sum-list (cons 3 (cons 4 empty))) 7)
(check-expect (sum-list (cons 3 (cons -3 empty))) 0)
(check-expect (sum-list (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 empty)))))) 15)

(define (sum-list list)
  (cond
    [(empty? list) 0]
    [else (+ (first list) (sum-list (rest list)))]))

;;Tests:
(check-expect (sum-list empty) 0)
(check-expect (sum-list (cons -5 (cons -5 empty))) -10)
(check-expect (sum-list (cons -1 (cons -2 (cons -3 (cons -4 (cons -5 empty))))))
              -15)



;;******************************************************************************



;;part (b)

;;(divide-list list num) produces a listof Num that is the result of dividing
;;  every element of list by num

;;divide-list (listof Num) Num -> (listof Num)

;;required: num is non-zero

;;Examples:
(check-expect (divide-list (cons 6 (cons 9 empty)) 3) (cons 2 (cons 3 empty)))
(check-expect (divide-list (cons -3 (cons 3 empty)) 3) (cons -1 (cons 1 empty)))
(check-expect (divide-list (cons 0 (cons -0 empty)) 3) (cons 0 (cons 0 empty)))

(define (divide-list list num)
  (cond
    [(empty? list) empty]
    [else (cons (/ (first list) num) (divide-list (rest list) num))]))

;;Tests:
(check-expect (divide-list empty 900880) empty)
(check-expect (divide-list (cons 12 (cons 99 (cons 36 empty))) 3)
              (cons 4 (cons 33 (cons 12 empty))))
(check-expect (divide-list (cons 10 (cons 20 empty)) 50)
              (cons 1/5 (cons 2/5 empty)))



;;******************************************************************************



;;part (c)

;;(normalize-list list) produces a listof Num that is the result of dividing
;;  the elements of list by the sum of every element in list

;;normalize-list: (listof Num) -> (listof Num)

;;required: all elements of list are positive

;;Examples:
(check-expect (normalize-list (cons 6 (cons 6 empty)))
              (cons .5 (cons .5 empty)))
(check-expect (normalize-list (cons 8 (cons 4 empty)))
              (cons 2/3 (cons 1/3 empty)))
(check-expect (normalize-list (cons 1 (cons 99 empty)))
              (cons .01 (cons .99 empty)))

(define (normalize-list list)
  (cond
    [(empty? list) empty]
    [else (divide-list list (sum-list list))]))

;;Tests:
(check-expect (normalize-list empty) empty)
(check-expect (normalize-list (cons 20 (cons 100 (cons 280 empty))))
              (cons 1/20 (cons 1/4 (cons 7/10 empty))))
(check-expect (normalize-list (cons 1 (cons 0 (cons 10 empty))))
              (cons 1/11 (cons 0 (cons 10/11 empty))))
(check-expect (normalize-list (cons 5 (cons 50 (cons 75 empty))))
              (cons 1/26 (cons 5/13 (cons 15/26 empty))))



;;******************************************************************************



;;part (d)

;;(list-replace list targetNum newNum) produces a listof Num that replaces all
;;  the occurences of targetNum with newNum, but is otherwise identical to list

;;list-replace: (listof Num) Num Num --> (listof Num)

;;required: an empty list produces an empty list

;;Examples:
(check-expect (list-replace (cons 6 (cons 6 empty)) 6 100) (cons 100 (cons 100 empty)))
(check-expect (list-replace (cons 8 (cons 4 empty)) 1 100) (cons 8 (cons 4 empty)))
(check-expect (list-replace (cons 1 (cons 2 (cons 2 (cons 1 empty)))) 1 2) (cons 2 (cons 2 (cons 2 (cons 2 empty)))))

(define (list-replace list targetNum newNum)
  (cond
    [(empty? list) empty]
    [else (cond
            [(= (first list) targetNum) (cons newNum (list-replace (rest list) targetNum newNum))]
            [else (cons (first list) (list-replace (rest list) targetNum newNum))])]))

;;Tests:
(check-expect (list-replace empty 6 100) empty)
(check-expect (list-replace (cons 97 (cons 98 (cons 99 (cons 1 empty)))) 1 100)
              (cons 97 (cons 98 (cons 99 (cons 100 empty)))))
(check-expect (list-replace (cons -1 (cons -1 empty)) -1 1)
              (cons 1 (cons 1 empty)))
(check-expect (list-replace
               (cons 24234 (cons 8233259 (cons 912349 (cons 3452 empty))))
               8233259 35345)
              (cons 24234 (cons 35345 (cons 912349 (cons 3452 empty)))))



;;******************************************************************************



;;part (e)

;;(count-repeats list) produces a Num that corresponds to how many equal adjacent
;; elements exist in the list

;;count-repeats: (listof Num) -> Num

;;required: empty list produces zero

;;Examples:
(check-expect (count-repeats (cons 5 (cons 9 empty))) 0)
(check-expect (count-repeats (cons -3 (cons 3 (cons 3 empty)))) 1)
(check-expect (count-repeats (cons 1 (cons 2 (cons 2 (cons 1 empty))))) 1)

(define (count-repeats list)
  (cond
    [(or (empty? list) (empty? (rest list))) 0]
    [else (cond
            [(= (first list) (first (rest list))) (+ 1 (count-repeats (rest list)))]
            [else (count-repeats (rest list))])]))

;;Tests:
(check-expect (count-repeats (cons 1 (cons 2 (cons 1 (cons 2 empty))))) 0)
(check-expect (count-repeats (cons 1 (cons 2 (cons 2 (cons 2 empty))))) 2)
(check-expect (count-repeats empty) 0)
(check-expect (count-repeats (cons 1 (cons -1 (cons -1 (cons 2 empty))))) 1)
